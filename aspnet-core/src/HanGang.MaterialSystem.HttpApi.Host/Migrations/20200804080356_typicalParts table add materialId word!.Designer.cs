// <auto-generated />
using System;
using HanGang.MaterialSystem.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HanGang.MaterialSystem.Migrations
{
    [DbContext(typeof(MyProjectHttpApiHostMigrationsDbContext))]
    [Migration("20200804080356_typicalParts table add materialId word!")]
    partial class typicalPartstableaddmaterialIdword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HanGang.MaterialSystem.DemoManagement.DemoProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OldName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Material_DemoProjects");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.DemoManagement.DemoUnitProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DemoProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemoProjectId");

                    b.ToTable("Material_DemoUnitProjects");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.ApplicationCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breif")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Requirement")
                        .HasColumnType("text");

                    b.Property<string>("SuppliedPart")
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Material_ApplicationCases");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Manufactory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TelePhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Material_Manufactorys");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedVehicleType")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufactoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaterialStandard")
                        .HasColumnType("text");

                    b.Property<int>("MaterialType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Model")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReelNumber")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Strength")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("TypicalPartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManufactoryId");

                    b.HasIndex("TypicalPartId");

                    b.ToTable("Material_Materials");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.MaterialRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Manufactory")
                        .HasColumnType("text");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Model")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReelNumber")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Material_MaterialRecommendations");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.MaterialTrial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TrialId");

                    b.ToTable("Material_MaterialTrials");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.MaterialTrialData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialTrialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialId");

                    b.ToTable("Material_MaterialTrialDatas");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Material_Roles");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.RoleResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("ResourceGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrialCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Material_RoleResources");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.TrialCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<bool?>("Trial")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Material_TrialCategorys");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.TrialDetailGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("BaseInfo")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<int?>("GroupOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrialId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("TrialParam")
                        .HasColumnType("boolean");

                    b.Property<bool?>("TrialResultOne")
                        .HasColumnType("boolean");

                    b.Property<bool?>("TrialResultTwo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Material_TrialDetailGroups");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.TrialDetailShowType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Picture")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<bool?>("Report")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Table")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TrialId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrialName")
                        .HasColumnType("text");

                    b.Property<int?>("TypeOrder")
                        .HasColumnType("integer");

                    b.Property<bool?>("TypicalPart")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Material_TrialDetailShowTypes");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("PassWord")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Material_Users");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Rbac.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Material_UserRoles");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Trial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("TrialType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Material_Trials");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BakeHardeningDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BH")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_BakeHardeningDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BakeHardeningDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BH2")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BakeHardeningDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rm")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rp")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rt")
                        .HasColumnType("numeric");

                    b.Property<string>("TemperatureTimes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BakeHardeningDataDetailId");

                    b.ToTable("Material_BakeHardeningDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BendingDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BendingOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BendingStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("NonProportionalBendingStrenth")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Span")
                        .HasColumnType("numeric");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_BendingDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.CementingDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CementingWidth")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FailureMode")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MPA")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_CementingDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ChemicalElementDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<decimal?>("ContentRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Element")
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Requirement")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_ChemicalElementDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.CompressDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CompressOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CompressiveStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("NonProportionalCompressStrenth")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_CompressDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.DentResistanceDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CyclicLoadingCurveKey")
                        .HasColumnType("text");

                    b.Property<string>("CyclicLoadingCurveString")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DentDpthLoadCurveKey")
                        .HasColumnType("text");

                    b.Property<string>("DentDpthLoadCurveString")
                        .HasColumnType("text");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("OriginalRigidity")
                        .HasColumnType("numeric");

                    b.Property<string>("PrimaryLoadingCurveKey")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryLoadingCurveString")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VisibleDentLoad")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_DentResistanceDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FLDDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LimitStrain")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_FLDDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FLDDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid?>("FLDDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MainStrain")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("SecondaryStrain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SpecimenWidth")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FLDDataDetailId");

                    b.ToTable("Material_FLDDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FlangingClaspDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<string>("FlangingLevel")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_FlangingClaspDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighCycleFatigueDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CyclicStressRatio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExtensometerGaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<decimal?>("FatigueLimitStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("SNAParameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SNBParameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SNRelatedParameter")
                        .HasColumnType("numeric");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<decimal?>("StandardDeviation")
                        .HasColumnType("numeric");

                    b.Property<string>("SurfaceQuality")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<bool?>("UseExtensometer")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_HighCycleFatigueDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighCycleFatigueDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid?>("HighCycleFatigueDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemSampleCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MaximumStress")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("StressAmplitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TestFrequency")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HighCycleFatigueDataDetailId");

                    b.ToTable("Material_HighCycleFatigueDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<decimal?>("Elongation")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PoissonRatio")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<decimal?>("StretchingSpeed")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TensileStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("TestTarget")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("YieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("YoungModulu")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_HighSpeedStrechDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetailStressStrain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("EngineeringStrain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EngineeringStress")
                        .HasColumnType("numeric");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid?>("HighSpeedStrechDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RealPlasticStrain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealPlasticStress")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealStrain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealStress")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HighSpeedStrechDataDetailId");

                    b.ToTable("Material_HighSpeedStrechDataDetailStressStrains");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetailStressStrainExtend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RealPlasticStrainExtend")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealPlasticStrainHalf")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealPlasticStressExtend")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealPlasticStressHalf")
                        .HasColumnType("numeric");

                    b.Property<string>("RealPlasticTestTarget")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_HighSpeedStrechDataDetailStressStrainExtends");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HydrogenInducedDelayedFractureDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("LiquorType")
                        .HasColumnType("text");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestName")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("TestTime")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_HydrogenInducedDelayedFractureDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HydrogenInducedDelayedFractureDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<decimal?>("Hour")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("HydrogenInducedDelayedFractureDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Span")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Strain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Stress")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HydrogenInducedDelayedFractureDataDetailId");

                    b.ToTable("Material_HydrogenInducedDelayedFractureDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.LowCycleFatigueDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CyclicStrainHardening")
                        .HasColumnType("numeric");

                    b.Property<string>("CyclicStrainRatio")
                        .HasColumnType("text");

                    b.Property<decimal?>("CyclicStrengthParameter")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExtensometerGaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<decimal?>("FatigueStrech")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FatigueStrechParameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FatigueStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FatigueStrengthParameter")
                        .HasColumnType("numeric");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RelatedLifeFatigueParameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RelatedLifeStrechParameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RelatedSressParameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("SurfaceQuality")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<bool?>("UseExtensometer")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_LowCycleFatigueDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.LowCycleFatigueDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CycleStressAmplitude")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("ElasticStrainAmplitude")
                        .HasColumnType("numeric");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<int?>("FailureCycleTimes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LowCycleFatigueDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PlasticStrainAmplitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("TestFrequency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalStrainAmplitude")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LowCycleFatigueDataDetailId");

                    b.ToTable("Material_LowCycleFatigueDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.MetallographicDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DepthDecarburization")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GrainSize")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("NonMetallicInclusionLevel")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("Structure")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_MetallographicDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_PaintingDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailAdhesionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PointAdhesionOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointAdhesionThree")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointAdhesionTwo")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailAdhesionItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailDampHeatItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PointOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointThree")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointTwo")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailDampHeatItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailElectrophoreticItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PointThickOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointThickThree")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PointThickTwo")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailElectrophoreticItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailHardnessItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("PointHardness")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailHardnessItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailHitResistanceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PointStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailHitResistanceItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailMembraneWeightItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AfterWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Area")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MembraneWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OriginalWeight")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailMembraneWeightItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailPRatioItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<decimal?>("IH")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ip")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Ratio")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailPRatioItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailPhosphatingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<decimal?>("CoverRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SizeText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailPhosphatingItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailRoughnessItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaintingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RaOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RaThree")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RaTwo")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("RzOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RzThree")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RzTwo")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PaintingDataDetailId");

                    b.ToTable("Material_PaintingDataDetailRoughnessItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Density")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HBW")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HRC")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HV")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Resistivity")
                        .HasColumnType("numeric");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_PhysicalPerformanceDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetailThermalConductivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhysicalPerformanceDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThermalConductivity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPerformanceDataDetailId");

                    b.ToTable("Material_PhysicalPerformanceDataDetailThermalConductivitys");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetailThermalExpansion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhysicalPerformanceDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TemperatureRange")
                        .HasColumnType("text");

                    b.Property<decimal?>("ThermalExpansion")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPerformanceDataDetailId");

                    b.ToTable("Material_PhysicalPerformanceDataDetailThermalExpansions");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ProhibitedSubstanceDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<decimal?>("ContentRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Element")
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Requirement")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_ProhibitedSubstanceDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BendingAngleRange")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HoldStress")
                        .HasColumnType("numeric");

                    b.Property<int?>("HoldTimes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("PunchFilletRadiusRange")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<string>("SampleSize")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("TestSpeed")
                        .HasColumnType("numeric");

                    b.Property<string>("TestType")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_ReboundDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BendingAngle")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MeasuringAngle")
                        .HasColumnType("numeric");

                    b.Property<string>("PunchFilletRadius")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReboundAngle")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ReboundDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ReboundDataDetailId");

                    b.ToTable("Material_ReboundDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BendingAngle")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReboundDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Rt1")
                        .HasColumnType("text");

                    b.Property<string>("Rt2")
                        .HasColumnType("text");

                    b.Property<string>("Rt3")
                        .HasColumnType("text");

                    b.Property<string>("Rt4")
                        .HasColumnType("text");

                    b.Property<string>("Rt5")
                        .HasColumnType("text");

                    b.Property<string>("Rt6")
                        .HasColumnType("text");

                    b.Property<string>("RtMin")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ReboundDataDetailId");

                    b.ToTable("Material_ReboundDataDetailItem2s");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReboundDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Rt1")
                        .HasColumnType("text");

                    b.Property<string>("Rt2")
                        .HasColumnType("text");

                    b.Property<string>("Rt3")
                        .HasColumnType("text");

                    b.Property<string>("Rt4")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ReboundDataDetailId");

                    b.ToTable("Material_ReboundDataDetailItem3s");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SecondaryWorkingEmbrittlementDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_SecondaryWorkingEmbrittlementDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SecondaryWorkingEmbrittlementDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExpansionType")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("SecondaryWorkingEmbrittlementDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("Swet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryWorkingEmbrittlementDataDetailId");

                    b.ToTable("Material_SecondaryWorkingEmbrittlementDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BHValue")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<decimal?>("Elongation")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IndenterDiameter")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MaximumForce")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NonProportionalExtendRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PlasticStrainRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PoissonRatio")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<decimal?>("StrainHardening")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TensileStrength")
                        .HasColumnType("numeric");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VImpactEnergy")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VImpactTemperature")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("YieldStrength")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_StaticTensionDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetailRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BHValue")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("Elongation")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("IndenterDiameter")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaximumForce")
                        .HasColumnType("text");

                    b.Property<string>("ModulusOfElasticity")
                        .HasColumnType("text");

                    b.Property<string>("NonProportionalExtendRatio")
                        .HasColumnType("text");

                    b.Property<string>("PlasticStrainRatio")
                        .HasColumnType("text");

                    b.Property<string>("PoissonRatio")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<string>("StrainHardening")
                        .HasColumnType("text");

                    b.Property<string>("TensileStrength")
                        .HasColumnType("text");

                    b.Property<string>("Thickness")
                        .HasColumnType("text");

                    b.Property<string>("VImpactEnergy")
                        .HasColumnType("text");

                    b.Property<string>("VImpactTemperature")
                        .HasColumnType("text");

                    b.Property<string>("YieldStrength")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_StaticTensionDataDetailRequirements");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetailStressStrain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RealStrain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealStress")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("StaticTensionDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Strain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Stress")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("StaticTensionDataDetailId");

                    b.ToTable("Material_StaticTensionDataDetailStressStrains");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyCoatingWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AfterWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Area")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MembraneWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OriginalWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("SurfacePropertyDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("WeightRequirement")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurfacePropertyDataDetailId");

                    b.ToTable("Material_SurfacePropertyCoatingWeights");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("SurfaceQualityGrade")
                        .HasColumnType("text");

                    b.Property<string>("TestItem")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_SurfacePropertyDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyRoughness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RPCOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RPCTwo")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RaOne")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RaTwo")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("SurfacePropertyDataDetailId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurfacePropertyDataDetailId");

                    b.ToTable("Material_SurfacePropertyRoughnesss");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyRoughnessAndPeakDensity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AbovePeakDensity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AboveRoughness")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BelowPeakDensity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BelowRoughness")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("RaRequirement")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("SurfacePropertyDataDetailId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurfacePropertyDataDetailId");

                    b.ToTable("Material_SurfacePropertyRoughnessAndPeakDensitys");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertySizeTolerance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("EdgeThickness1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EdgeThickness2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EdgeThickness3")
                        .HasColumnType("numeric");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SizeRequirement")
                        .HasColumnType("text");

                    b.Property<Guid?>("SurfacePropertyDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<string>("TestCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurfacePropertyDataDetailId");

                    b.ToTable("Material_SurfacePropertySizeTolerances");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.WeldingDataDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BoostTimes")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CriticalJointDiameter")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Dates")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ElectrodePressure")
                        .HasColumnType("numeric");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileString")
                        .HasColumnType("text");

                    b.Property<decimal?>("FormElongation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormModulusOfElasticity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormTensileStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FormYieldStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GaugeDistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HeadDiameter")
                        .HasColumnType("numeric");

                    b.Property<int?>("HoldingWeldingTimes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MaterialTrialDataId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxmumWeldingTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("MiddleWeldingTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumWeldingTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("PreloadingTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("PulseTimes")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SampleCode")
                        .HasColumnType("text");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Standard")
                        .HasColumnType("text");

                    b.Property<string>("TestMethod")
                        .HasColumnType("text");

                    b.Property<string>("TestOrganization")
                        .HasColumnType("text");

                    b.Property<string>("TestType")
                        .HasColumnType("text");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("numeric");

                    b.Property<string>("WelderMode")
                        .HasColumnType("text");

                    b.Property<string>("WelderType")
                        .HasColumnType("text");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTrialDataId");

                    b.ToTable("Material_WeldingDataDetails");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.WeldingDataDetailItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("LeftBoundaryElectric")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("RightBoundaryElectric")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WeldingCurrentInterval")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("WeldingDataDetailId")
                        .HasColumnType("uuid");

                    b.Property<int?>("WeldingTimes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeldingDataDetailId");

                    b.ToTable("Material_WeldingDataDetailItems");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TypicalPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedVehicleType")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("directoryId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Material_TypicalParts");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationName")
                        .HasColumnName("ApplicationName")
                        .HasColumnType("character varying(96)")
                        .HasMaxLength(96);

                    b.Property<string>("BrowserInfo")
                        .HasColumnName("BrowserInfo")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientId")
                        .HasColumnName("ClientId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnName("ClientIpAddress")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnName("ClientName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("CorrelationId")
                        .HasColumnName("CorrelationId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Exceptions")
                        .HasColumnName("Exceptions")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .HasColumnName("HttpMethod")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnName("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnName("ImpersonatorTenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnName("ImpersonatorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantName")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnName("ExecutionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .HasColumnName("MethodName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Parameters")
                        .HasColumnName("Parameters")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ServiceName")
                        .HasColumnName("ServiceName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnName("ChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("ChangeType")
                        .HasColumnName("ChangeType")
                        .HasColumnType("smallint");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnName("EntityId")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasColumnName("EntityTypeFullName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnName("NewValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnName("OriginalValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnName("PropertyName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasColumnName("PropertyTypeFullName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("character varying(1048576)")
                        .HasMaxLength(1048576);

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)15);

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpFeatureValues");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Regex")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("RegexDescription")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AbpClaimTypes");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatic")
                        .HasColumnName("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("SecurityStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Surname")
                        .HasColumnName("Surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("character varying(196)")
                        .HasMaxLength(196);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityServerApiResources");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Type");

                    b.ToTable("IdentityServerApiClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean");

                    b.HasKey("ApiResourceId", "Name");

                    b.ToTable("IdentityServerApiScopes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Name", "Type");

                    b.ToTable("IdentityServerApiScopeClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ApiResourceId", "Type", "Value");

                    b.ToTable("IdentityServerApiSecrets");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("boolean");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("boolean");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("boolean");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("IdentityServerClients");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("IdentityServerClientClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Origin")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("ClientId", "Origin");

                    b.ToTable("IdentityServerClientCorsOrigins");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("GrantType")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "GrantType");

                    b.ToTable("IdentityServerClientGrantTypes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Provider")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Provider");

                    b.ToTable("IdentityServerClientIdPRestrictions");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "PostLogoutRedirectUri");

                    b.ToTable("IdentityServerClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "Key");

                    b.ToTable("IdentityServerClientProperties");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "RedirectUri");

                    b.ToTable("IdentityServerClientRedirectUris");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Scope");

                    b.ToTable("IdentityServerClientScopes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("IdentityServerClientSecrets");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Grants.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("IdentityServerPersistedGrants");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.Property<Guid>("IdentityResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("IdentityResourceId", "Type");

                    b.ToTable("IdentityServerIdentityClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("IdentityServerIdentityResources");
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpPermissionGrants");
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(2048)")
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("TenantId", "Name");

                    b.ToTable("AbpTenantConnectionStrings");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.DemoManagement.DemoUnitProject", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.DemoManagement.DemoProject", "DemoProject")
                        .WithMany("DemoUnitProjects")
                        .HasForeignKey("DemoProjectId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.ApplicationCase", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.Material", "Material")
                        .WithMany("ApplicationCases")
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Material", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.Manufactory", "Manufactory")
                        .WithMany("Materials")
                        .HasForeignKey("ManufactoryId");

                    b.HasOne("HanGang.MaterialSystem.Entities.TypicalPart", "TypicalPart")
                        .WithMany("Materials")
                        .HasForeignKey("TypicalPartId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.MaterialTrial", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.Material", "Material")
                        .WithMany("MaterialTrials")
                        .HasForeignKey("MaterialId");

                    b.HasOne("HanGang.MaterialSystem.Entities.Trial", "Trial")
                        .WithMany("MaterialTrials")
                        .HasForeignKey("TrialId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.MaterialTrialData", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrial", "MaterialTrial")
                        .WithMany("TrialDatas")
                        .HasForeignKey("MaterialTrialId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.Trial", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.Trial", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BakeHardeningDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("BakeHardeningDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BakeHardeningDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.BakeHardeningDataDetail", "BakeHardeningDataDetail")
                        .WithMany("BakeHardeningDataDetailItems")
                        .HasForeignKey("BakeHardeningDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.BendingDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("BendingDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.CementingDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("CementingDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ChemicalElementDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("ChemicalElementDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.CompressDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("CompressDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.DentResistanceDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("DentResistanceDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FLDDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("FLDDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FLDDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.FLDDataDetail", "FLDDataDetail")
                        .WithMany("FLDDataDetailItems")
                        .HasForeignKey("FLDDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.FlangingClaspDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("FlangingClaspDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighCycleFatigueDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("HighCycleFatigueDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighCycleFatigueDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.HighCycleFatigueDataDetail", "HighCycleFatigueDataDetail")
                        .WithMany("HighCycleFatigueDataDetailItems")
                        .HasForeignKey("HighCycleFatigueDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("HighSpeedStrechDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetailStressStrain", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetail", "HighSpeedStrechDataDetail")
                        .WithMany("HighSpeedStrechDataDetailStressStrains")
                        .HasForeignKey("HighSpeedStrechDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HighSpeedStrechDataDetailStressStrainExtend", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("HighSpeedStrechDataDetailStressStrainExtends")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HydrogenInducedDelayedFractureDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("HydrogenInducedDelayedFractureDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.HydrogenInducedDelayedFractureDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.HydrogenInducedDelayedFractureDataDetail", "HydrogenInducedDelayedFractureDataDetail")
                        .WithMany("HydrogenInducedDelayedFractureDataDetailItems")
                        .HasForeignKey("HydrogenInducedDelayedFractureDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.LowCycleFatigueDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("LowCycleFatigueDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.LowCycleFatigueDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.LowCycleFatigueDataDetail", "LowCycleFatigueDataDetail")
                        .WithMany("LowCycleFatigueDataDetailItems")
                        .HasForeignKey("LowCycleFatigueDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.MetallographicDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("MetallographicDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("PaintingDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailAdhesionItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailAdhesionItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailDampHeatItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailDampHeatItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailElectrophoreticItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailElectrophoreticItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailHardnessItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailHardnessItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailHitResistanceItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailHitResistanceItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailMembraneWeightItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailMembraneWeightItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailPRatioItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailPRatioItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailPhosphatingItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailPhosphatingItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetailRoughnessItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PaintingDataDetail", "PaintingDataDetail")
                        .WithMany("PaintingDataDetailRoughnessItems")
                        .HasForeignKey("PaintingDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("PhysicalPerformanceDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetailThermalConductivity", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetail", "PhysicalPerformanceDataDetail")
                        .WithMany("PhysicalPerformanceDataDetailThermalConductivities")
                        .HasForeignKey("PhysicalPerformanceDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetailThermalExpansion", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.PhysicalPerformanceDataDetail", "PhysicalPerformanceDataDetail")
                        .WithMany("PhysicalPerformanceDataDetailThermalExpansions")
                        .HasForeignKey("PhysicalPerformanceDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ProhibitedSubstanceDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("ProhibitedSubstanceDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("ReboundDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetail", "ReboundDataDetail")
                        .WithMany("ReboundDataDetailItems")
                        .HasForeignKey("ReboundDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem2", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetail", "ReboundDataDetail")
                        .WithMany("ReboundDataDetailItems2")
                        .HasForeignKey("ReboundDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetailItem3", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.ReboundDataDetail", "ReboundDataDetail")
                        .WithMany("ReboundDataDetailItems3")
                        .HasForeignKey("ReboundDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SecondaryWorkingEmbrittlementDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("SecondaryWorkingEmbrittlementDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SecondaryWorkingEmbrittlementDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.SecondaryWorkingEmbrittlementDataDetail", "SecondaryWorkingEmbrittlementDataDetail")
                        .WithMany("SecondaryWorkingEmbrittlementDataDetailItems")
                        .HasForeignKey("SecondaryWorkingEmbrittlementDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("StaticTensionDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetailRequirement", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("StaticTensionDataDetailRequirements")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetailStressStrain", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.StaticTensionDataDetail", "StaticTensionDataDetail")
                        .WithMany("StaticTensionDataDetailStressStrains")
                        .HasForeignKey("StaticTensionDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyCoatingWeight", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", "SurfacePropertyDataDetail")
                        .WithMany("SurfacePropertyCoatingWeights")
                        .HasForeignKey("SurfacePropertyDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("SurfacePropertyDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyRoughness", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", "SurfacePropertyDataDetail")
                        .WithMany("SurfacePropertyRoughnesses")
                        .HasForeignKey("SurfacePropertyDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyRoughnessAndPeakDensity", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", "SurfacePropertyDataDetail")
                        .WithMany("SurfacePropertyRoughnessAndPeakDensitys")
                        .HasForeignKey("SurfacePropertyDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertySizeTolerance", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.SurfacePropertyDataDetail", "SurfacePropertyDataDetail")
                        .WithMany("SurfacePropertySizeTolerances")
                        .HasForeignKey("SurfacePropertyDataDetailId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.WeldingDataDetail", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.MaterialTrialData", "MaterialTrialData")
                        .WithMany("WeldingDataDetails")
                        .HasForeignKey("MaterialTrialDataId");
                });

            modelBuilder.Entity("HanGang.MaterialSystem.Entities.TrialDataDetails.WeldingDataDetailItem", b =>
                {
                    b.HasOne("HanGang.MaterialSystem.Entities.TrialDataDetails.WeldingDataDetail", "WeldingDataDetail")
                        .WithMany("WeldingDataDetailItems")
                        .HasForeignKey("WeldingDataDetailId");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiScope", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId", "Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
